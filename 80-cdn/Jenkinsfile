pipeline {
    agent{
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        // disableConcurrentBuilds()
        retry(2)
        ansiColor('xterm')
    }
    environment{
        // env
        appVersion = ''
    }
    parameters {    //added this params
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select actions')
    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){      //add credential id here eg: aws-creds

                    sh """
                    cd 80-cdn
                    terraform init -reconfigure
                    terraform plan -out=tfplan
                    """
                }
            }
        }
        stage('Apply or Destroy') {
            // input {
            //     message "Should we continue to 80-cdn ?"
            //     ok "Yes, we should."
            // }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){

                    sh """
                    cd 80-cdn
                    if [ ${params.ACTION} == 'apply' ]
                    then
                        terraform apply -auto-approve tfplan

                    elif [ ${params.ACTION} == 'destroy' ]
                    then
                        terraform destroy -auto-approve
                    fi
                    """
                }
            }
        }

        stage('Destoying Parallely'){
            when{
                expression {params.ACTION == 'destroy'}
            }
            parallel{
                stage('ECR'){
                    steps{
                        build job: '70-ecr', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
                    }
                }
                stage('ALB'){
                    steps{
                        build job: '60-alb', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
                    }
                }
                stage('EKS'){
                    steps{
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: 'destroy')], wait: true
                    }
                }
                stage('RDS'){
                    steps{
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
                    }
                }
                stage('BAstion'){
                    steps{
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: 'destroy')], wait: false
                    }
                }
            }
        }
        stage("Destory ACM, SG and VPC"){
             when{
                expression {params.ACTION == 'destroy'}
             }
            parallel{
                stage('ACM'){
                    steps{
                        build job: '50-acm', parameters: [string(name: 'ACTION', value: 'destroy')]
                    }
                }
                stage('SG'){
                    steps{
                         build job: '10-sg', parameters: [string(name: 'ACTION', value: 'destroy')], wait: true
                    }
                }
                stage('VPC'){
                    steps{
                         build job: '00-vpc', parameters: [string(name: 'ACTION', value: 'destroy')]
                    }
                }
            }
        }
    }
    post{
        always{
            echo "This section run alwys"   
            deleteDir()     //delete directory, for waste of memory
        }
        success{
            echo "This section run when pipleine is seccess."
        }
        failure{
            echo "this section fail when pipeline is FAILED"
        }
    }
}


    
