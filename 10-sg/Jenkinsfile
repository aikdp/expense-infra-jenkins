pipeline {
    agent{
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        // disableConcurrentBuilds()
        retry(2)
        ansiColor('xterm')
    }
    environment{
        // env
        appVersion = ''
    }
    parameters {    //added this params
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select actions')
    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {     //add credential id here eg: aws-creds

                    sh """
                        cd 10-sg
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
                }
            }
        }
        stage('Apply or Destroy') {
            // input {
            //     message "Should we continue to SG ?"
            //     ok "Yes, we should."
            // }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){

                sh """
                    cd 10-sg
                    if [ ${params.ACTION} == 'apply' ]
                    then
                        terraform apply -auto-approve tfplan

                    elif [ ${params.ACTION} == 'destroy' ]
                    then
                        terraform destroy -auto-approve
                    fi
                """
                }
            }
        }
        // stage('Trigger Downstream Job') {
        //     when {
        //         expression {params.ACTION == apply }
        //     }
        //     steps {
        //         // build(job: '20-bastion', parameters: [string(name: 'ACTION', value: 'apply')])
        //         build job: '20-bastion', parameters: [[$class: 'StringParameterValue', name: 'ACTION', value: apply]]
        //     }
        // }
        //Triigerring parallel stages
        stage('Parallel Stages'){
            when {
                expression {params.ACTION == 'apply'}
            }
            parallel{
                stage('Bastion'){
                    steps{
                        build job: '20-bastion', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
                stage('RDS'){
                    steps{
                        build job: '30-rds', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
                stage('EKS'){
                    steps{
                        build job: '40-eks', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
                // stage('ACM'){
                //     steps{
                //         build job: '50-acm', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                //     }
                // }
                stage('ECR'){
                    steps{
                        build job: '70-ecr', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
            }
        }
        stage('Sequential'){
            when{
                expression {params.ACTION == 'apply'}
            }
            parallel{
                stage('ACM'){
                    steps{
                        build job: '50-acm', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'] //once complted, then trigger next
                    }
                }
                stage('ALB'){
                    steps{
                        build job: '60-alb', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
                stage('CDN'){
                    steps{
                        build job: '80-cdn', parameters[$class: 'StringParameterValue', name: 'ACTION', value: 'apply'], wait: false
                    }
                }
            }
        } 
    }
    post{
        always{
            echo "This section run alwys"   
            deleteDir()     //delete directory, for waste of memory
        }
        success{
            echo "This section run when pipleine is seccess."
        }
        failure{
            echo "this section fail when pipeline is FAILED"
        }
    }
}


    
